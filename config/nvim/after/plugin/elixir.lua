-- local elixir = require("elixir")
--
-- elixir.setup({
--   -- specify a repository and branch
--   repo = "elixir-lsp/elixir-ls", -- defaults to
--   tag = "v0.13.0",
--
--   -- default settings, use the `settings` function to override settings
--   settings = elixir.settings({
--     dialyzerEnabled = false,
--     fetchDeps = false,
--     enableTestLenses = false,
--     suggestSpecs = false,
--   }),
--
--   on_attach = function(client, bufnr)
--     local opts = {buffer = bufnr, remap = false}
--
--     vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--     vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--     vim.keymap.set("n", "<leader>ca", function() vim.lsp.buf.code_action() end, opts)
--     vim.keymap.set("n", "gr", function() vim.lsp.buf.references() end, opts)
--     vim.keymap.set("n", "<leader>rn", function() vim.lsp.buf.rename() end, opts)
--     vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
--
--     -- vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--     -- vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--     vim.keymap.set("n", "<leader>dj", function() vim.diagnostic.goto_next() end, opts)
--     vim.keymap.set("n", "<leader>dk", function() vim.diagnostic.goto_prev() end, opts)
--
--     -- run the codelens under the cursor
--     vim.keymap.set("n", "<leader>cl",  vim.lsp.codelens.run, opts)
--
--     -- remove the pipe operator
--     vim.keymap.set("n", "<leader>fp", ":ElixirFromPipe<cr>", opts)
--     -- add the pipe operator
--     vim.keymap.set("n", "<leader>tp", ":ElixirToPipe<cr>", opts)
--     vim.keymap.set("v", "<leader>em", ":ElixirExpandMacro<cr>", opts)
--
--     vim.keymap.set("n", "<leader>lf", "<cmd>lua vim.lsp.buf.format()<cr>", opts)
--
--     -- bindings for standard LSP functions.
--     vim.keymap.set("n", "<leader>gd", "<cmd>lua vim.diagnostic.open_float()<cr>", opts)
--
--     -- local map_opts = { buffer = true, noremap = true}
--     -- bindings for standard LSP functions.
--     -- vim.keymap.set("n", "<space>gd", "<cmd>lua vim.diagnostic.open_float()<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>dt", "<cmd>lua vim.lsp.buf.definition()<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>K", "<cmd>lua vim.lsp.buf.hover()<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>gD","<cmd>lua vim.lsp.buf.implementation()<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>1gD","<cmd>lua vim.lsp.buf.type_definition()<cr>", map_opts)
--     -- keybinds for fzf-lsp.nvim: https://github.com/gfanto/fzf-lsp.nvim
--     -- you could also use telescope.nvim: https://github.com/nvim-telescope/telescope.nvim
--     -- there are also core vim.lsp functions that put the same data in the loclist
--     -- vim.keymap.set("n", "<space>gr", ":References<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>g0", ":DocumentSymbols<cr>", map_opts)
--     -- vim.keymap.set("n", "<space>gW", ":WorkspaceSymbols<cr>", map_opts)
--     -- vim.keymap.set("n", "<leader>d", ":Diagnostics<cr>", map_opts)
--
--
--     -- keybinds for vim-vsnip: https://github.com/hrsh7th/vim-vsnip
--     -- vim.cmd([[imap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>']])
--     -- vim.cmd([[smap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>']])
--
--     -- update capabilities for nvim-cmp: https://github.com/hrsh7th/nvim-cmp
--     -- require("cmp_nvim_lsp").update_capabilities(capabilities)
--   end
-- })
